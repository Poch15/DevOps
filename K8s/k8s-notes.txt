-----------------------------------
Tools to install kubernetes cluster
-----------------------------------
1) minikube - one node cluster; great for local setup
2) dockerclient - great for local setup
3) kops - for production cluster; test all k8s features
4) kubeadm - for production cluster

## commands:
smem-releng
aws eks update-kubeconfig --name eks20-1 --region us-east-1

describe no node
get po -n namespace
get no
get po -A
create ns namespace
apply -f .
apply -f filename
describe pod -n namespace
logs pod/pod -n namespace




aws eks update-kubeconfig --name <CLUSTER> --region us-east-1

k apply -f nginx-deployment.yml

k logs pod/my-deployment-6dc9f7ff94-k9jwd -n pabs

k describe po my-deployment-6dc9f7ff94-k9jwd -n pabs

k get svc -n pabs

k edit -f nginx-deployment.yml



SAMPLE YAML

apiVersion: v1
kind: Service
metadata:
  name: my-service
  namespace: paul
  labels:
    app: my-app
spec:
  selector:
    app: my-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
-----------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deployment
  namespace: paul
  labels:
    app: my-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:i
        app: my-app
    spec:
      containers:
      - name: nginx
        image: nginx_:1.7.9
        ports:
        - containerPort: 80
      nodeSelector:
    	disktype: ssd

--------------------------------
Cheatsheet: Kubernetes commands
--------------------------------
kubectl get pod: Get information about all running pods

kubectl describe pod <pod>: Describe one pod

kubectl expose pod <pod> --port=444 --name=frontend: Expose the port of a pod (creates a new service)

kubectl port-forward <pod> 8080: Port forward the exposed pod port to your local machine

kubectl attach <podname> -i: Attach to the pod

kubectl exec <pod> -- command: Execute a command on the pod

kubectl label pods <pod> mylabel=awesome: Add a new label to a pod

kubectl run -i --tty busybox --image=busybox --restart=Never -- sh: Run a shell in a pod - very useful for debugging

kubectl get deployments: Get information on current deployments

kubectl get rs: Get information about the replica sets

kubectl get pods --show-labels: get pods, and also show labels attached to those pods

kubectl rollout status deployment/helloworld-deployment: Get deployment status

kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2: Run k8s-demo with the image label version 2

kubectl edit deployment/helloworld-deployment: Edit the deployment object

kubectl rollout status deployment/helloworld-deployment: Get the status of the rollout

kubectl rollout history deployment/helloworld-deployment: Get the rollout history

kubectl rollout undo deployment/helloworld-deployment: Rollback to previous version

kubectl rollout undo deployment/helloworld-deployment --to-revision=n: Rollback to any version version
------------
AWS Commands
------------
aws ec2 create-volume --size 10 --region us-east-1 --availability-zone us-east-1a --volume-type gp2

Certificates
Creating a new key for a new user: openssl genrsa -out myuser.pem 2048

Creating a certificate request: openssl req -new -key myuser.pem -out myuser-csr.pem -subj "/CN=myuser/O=myteam/"

Creating a certificate: openssl x509 -req -in myuser-csr.pem -CA /path/to/kubernetes/ca.crt -CAkey /path/to/kubernetes/ca.key -CAcreateserial -out myuser.crt -days 10000
-----------------
Abbreviations used
------------------
Resource type: Abbreviated alias

configmaps: cm

customresourcedefinition: crd

daemonsets: ds

deployments deploy

horizontalpodautoscalers: hpa

ingresses ing

limitranges limits

namespaces: ns

nodes: no

persistentvolumeclaims: pvc

persistentvolumes: pv

pods: po

replicasets: rs

replicationcontrollers: rc

resourcequotas: quota

serviceaccounts: sa

services: svc

--------------------
TIPS
---------------------

12factor.net = How to write stateless applicatio

--------------------
TROUBLESHOOTING
--------------------
kubectl run -i -tty busybox --image=busybox --restart=Never -- sh
kubectl attach <pod hostname> -i
kubectl exec -it <pod hostname> --bash
kubectl logs <pod hostname>

--------------------
TEST
--------------------
kubectl run -i -tty load-generator --image=busybox /bin/sh
whie true; do wget -q -0- http://hpa-example.default.svc.cluster.local:310001; done




===================================================================================================
MUMSHAD MA
===================================================================================================

# Create a new pod with the nginx image.
kubectl run <image name> --image=<image name>

# Describe pod
kubectl describe pod <pod name>

# Delete pod
kubectl delete pod

# Create Redis pod using yml config
kubectl create -f redis-pod.yml

# Identiy which node the pods are placed
kubectl get pods -o wide

# Display replication controller / replicaset
kubectl get replicationcontroller
kubectl get replicaset

# Scale replica set
kubectl replace -f replicaset-definition.yml
kubectl scale --replicas=6 -f replicaset-definition.yml
kubectl scale --replicas=6 replicaset myapp-replicaset

# Generate deployment YAML (-o yaml). Don't create it(--dry-run) with 4 Replicas (--replicas=4)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml

# Display Pods in kube-system namespace
kubectl get pods --namespace=kube-system

# Change default namespace
kubectl config set-context $(kubectl config current-context) --namespace=dev

# Create service via CLI
kubectl expose deployment simple-webapp-deployment --name=webapp-service --target-port=8080 --type=NodePort --port=8080 --dry-run=client -o yaml > svc.yaml

# Create SERVICE for pod
kubectl expose pod redis --port=6379 --name=redis-service
service/redis-service exposed

# Check status of Controller, Scheduler and etcd
kubectl get componentstatus

# Set taint to a node
kubectl taint nodes node-name key=value:taint-effect

# Set toleration to a pod
kubectl taint nodes node1 app

# Get number of labels in a node
kubectl get nodes node01 --show-labels

# Set label on node
kubectl label nodes node01 color=blue

# View memory and cpu consumption of node / pods
kubectl top node
kubectl top pod

# View rollout status
kubectl rollout status deployment/myapp-deployment

# View rollout history and revision of deployments
kubect rollout history deployment/myapp-deployment

# Undo deployments
kubect rollout undo deployment/myapp-deployment

# Encode secrets
echo -n 'mysqlpassword123' | base64

# Encode secrets
echo -n 'bz1zy#1s' | base64 --decode

# Drain node
kubectl drain node01 --ignore-daemonsets
kubectl drain node01 --ignore-daemonsets --force

# Cordon / uncordon node = Make node unscheduleable
kubectl cordon node01 / kubectl uncordon node01

# Generate private key
openssl genrsa -out my-bank.key 1024

# Generate public key
openssl rsa -in my-bank.key -pubout > mybank.pem

# Create service account
kubectl create serviceaccount dashboard-app