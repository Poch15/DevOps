	
===========================
  AWS SE = IAM User Method
===========================

=== IAM User Method ===

# Enable AWS SE
$ vault secrets enable aws

# Configure AWS SE
$ vault write aws/config/root \
	access_key=alskdjflkasjf \
	secret_key=alskdjflajksdf \
	region=us-east-1

# Read AWS  Credentials
$ vault read /aws/config/root

# Rotate root aws creds
$ vault write -f aws/config/rotate-root

$ vault write aws/roles/vaultadvanced \
	policy_arns=arns:aws:iam:aws:policy/ReadOnlyCcess \
	credential_type=iam_user

# Display role details
$ vault read aws/roles/vaultadvanced

# Generate Credentials for AWS | It will display the access and secret key 
$ vault read aws/creds/vaultadvanced

# Revoke lease | This will delete associated user in AWS
$ vault lease revoke <lease id>

# Revoke bunch of credentials
$ vault lease revoke -prefix aws/creds/vaultadvanced

==============================
  AWS SE = Assumed Role Method
==============================

# Enable AWS SE
$ vault secrets enable aws

# Need to add permission to vault cluster that allows access to the role from other account | Action: sts:AssumeRole

# Create role in vault cluster
$ vault write aws/roles/s3_access \
	role_arns:arns:aws:iam::829374923874:role/vault-role-access \
	credential_type=assumed_role

# Generate credentials against new role | You will get access, secret key and security token
$ vault write aws/sts/s3_access -ttl=60m








# Configure Database SE
$ vault write database/config/prod-database \
	plugin_name=mysql-aurora-database-plugin \
	connection_url="" \
	allowed_roles="app-integration" \
	username="" \
	password=""


	
=========
Transit 
=========
# Enable transit engine
$ vault secrets enable transit -description=""

# Create encryption key
$ vault write -f transit/keys/training type="rsa"

# Read on key path
$ vault read transit/keys/training

# Rotate key
$ vault write -f transit/keys/training/rotate

# Encrypt data | it must be base64 encoded
$ vault write -f transit/encrypt/training plaintext=$BASE64

# Rewrap old encrypted data
$ vault write transit/rewrap/training \
	ciphertext="vault:v2:23489sdfga87asdgg"

# Decrypt data
$ vault write transit/decrypt/training \
	ciphertext="vault:v3:98dfgh3247dfhal"

# Set min encryption version
$ vault write transit/keys/training/config min_decryption_version=3



==============================
             KV
==============================

# Enable KV secrets engine
$ vault secrets enable -path=training kv

# Write data to a kv store
$ vault kv put training/apps/jenkins apikey=alksdjiur23

# Read data from a kv store
$ vault kv get training/apps/jenkins

# Read data in a json format
$ vault kv get -format=json training/apps/jenkins

# Delete data
$ vault kv delete training/apps/jenkins

# Upgrade to v2
$ vault kv enable-versioning training/

# Read version 1 of data
$ vault kv get -version=1 training/apps/jenkins

# Undelete specific versions
$ vault kv undelete -versions=2,1,5 training/apps/jenkins

# Destroy data | destroy on disk | cannot be undelete
$ vault kv destroy -versions=1 training/apps/jenkins

# Display metadata of kv data
$ vault kv metadata get training/apps/jenkins

==============================
             DB
==============================
# Create dynamic credentials

# Enable db se
$ vault secrets enable -path=mysql database

# Configure vault with db
$ vault write mysql/config/mysql-database \
	plugin_name=mysql-rds-database-plugin \
	connetion_url="{{username}}:{{password}}@tcp(database-1.cfakjsd234a.us-east-1.rds.amazonaws.com:3306)" \
	allowed_roles="advanced" \
	username="admin" \
	password="vaultadvanced"

# Create role for db
$ vault write mysql/roles/advanced \
	 db_name=mysql-database \
	creation_statements="CREATE USER '{{name}}''@'%' IDENTIFIED BY '{{password}}';GRANT SELECT ON *.* TO '{{name}}'@'%';" \
	default_ttl="1h" \
	max_ttl="24" \

# Read db roles
$ vault read mysql/roles/advanced

# Rotate the db credentials 
$ vault write -f myql/rotate-root/mysql-database

# Get dynamic credentials from db via vault
$ vault read mysql/creds/advanced

# Revoke creds
$ vault lease revoke mysql/creds/advanced/aWlaksdj345H

# Revoke list of creds
$ vault lease revoke -prefix mysql/creds/advanced/

===========================================
 PKI - Build your own Certificate Authority
===========================================
# Enable pki se
$ vault secrets enable pki

# Set the max lease
$ vault secrets tune -max-lease-ttl87600h pki

# Create root certificate locally
$ vault write -field=certificate pki/root/generate/internal \
	common_name="vaultadvanced.com \
	ttl=87600h > ca_cert.crt

# Configure CA and CRL (Certificate Revocation List)
$ vault write pki/config/urls  \
	issuing_certificates="http://127.0.0.1:8200/v1/pki/ca" \
	crl_distribution_points="http://127.0.0.1:8200/v1/pki/crl"

# Enable intermediate CA and sign by the root CA
$ vault secrets enable -path=pki_int -description="Intermediate" pki

# Tune the path
$ vault secrets tune -max-lease-ttl=43800h pki_int

# Generate an intermediate, saved as CSR, upload and have the root signed it
$ vault write -format=json pki_int/intermediate/generate/internal \
	common_name="vaultadvanced.com Intermediat Authority" \
	| jq -r '.data.csr' > pki_intermediate.csr

# 
$ vault write -format=json pki/root/sign-intermediate csr=@pki_intermediate.csr \
	format=pem_bundle ttl="43800h" | jq -r '.data.certificate' > \
	intermediate.cert.pem

# Import back to intermediate
$ vault write pki_int/intermediate/set-signed certificate=@intermediate.cert.pem

# Create role | Limit which domains that can be generated certs from
$ vault write pki_int/roles/vaultadvanced \
	allowed_domains="vaultadvanced.com" allow_dubdomain=true \
	max_ttl="720h"

# List roles
$ vault list pki_int/roles


# Display info of roles
$ vault read pki_int/roles

# Request certificate from vault cluster
$ vault write pki_int/issue/vaultadvanced common_name="learn.vaultadvanced.com" \
	ttl="24h"


==============================
  TOTP - Virtual MFA device
==============================

# Enable totp se
$ vault secrets enable totp

# 
$ vault write totp/keys/aws \
	url="otpauth://totp/Amazon%20Services:totp@54564321684?secret=<MFA secret key>"

# Generate totp code
$ vault read totp/code/aws


